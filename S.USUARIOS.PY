"""
S.USUARIOS.PY
Sistema de control de contratos y notificaciones autom√°ticas para usuarios (correo y WhatsApp),
con generaci√≥n de dashboard y gesti√≥n de credenciales.

- Lee usuarios desde un archivo Excel.
- Env√≠a notificaciones por correo y WhatsApp seg√∫n vencimiento de contrato.
- Genera un dashboard HTML con el estado de los usuarios.
- Permite b√∫squeda por DNI y env√≠o de credenciales.
- Incluye interfaz de login y b√∫squeda con Tkinter.

Dependencias: pandas, pyautogui, pyperclip, pygetwindow, smtplib, tkinter, webbrowser, json, datetime
"""

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import pandas as pd
import time
import webbrowser
import os
import json
import smtplib
import tkinter as tk
from email.message import EmailMessage
from tkinter import messagebox
from datetime import datetime
import pyautogui
import logging

logging.basicConfig(filename='log_sistema.txt', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

# --- UTILIDADES DE NOTIFICACI√ìN ---
def enviar_correo(destinatario, asunto, cuerpo):
    """
    Env√≠a un correo electr√≥nico usando SMTP SSL (Gmail).
    """
    try:
        remitente = "informaticauti9@gmail.com"
        contrase√±a = "ybnl zlka qwgb phrs"
        msg = EmailMessage()
        msg.set_content(cuerpo)
        msg["Subject"] = asunto
        msg["From"] = remitente
        msg["To"] = destinatario
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(remitente, contrase√±a)
            smtp.send_message(msg)
        logging.info(f"Correo enviado a {destinatario} con asunto '{asunto}'")
    except Exception as e:
        logging.error(f"Error al enviar correo a {destinatario}: {e}")
        raise

def enviar_whatsapp(telefono, mensaje):
    """
    Env√≠a un mensaje por WhatsApp Desktop automatizando el proceso.
    """
    try:
        if not telefono.startswith("+"):
            telefono = "+51" + telefono
        webbrowser.open(f"whatsapp://send?phone={telefono}")
        time.sleep(7)
        import pyperclip
        import pygetwindow as gw
        ventana = None
        for w in gw.getAllWindows():
            if w.title and "WhatsApp" in w.title:
                ventana = w
                break
        if ventana:
            try:
                ventana.activate()
                ventana.maximize()
            except Exception as e:
                logging.warning(f"No se pudo maximizar/activar ventana WhatsApp: {e}")
        else:
            logging.error("No se encontr√≥ ventana de WhatsApp para activar.")
            print("No se encontr√≥ ventana de WhatsApp para activar.")
            return
        pyautogui.click(300, 700)
        pyperclip.copy(mensaje)
        pyautogui.hotkey("ctrl", "v")
        pyautogui.press("enter")
        logging.info(f"Mensaje WhatsApp enviado a {telefono}")
        print(f"‚úÖ Mensaje enviado a {telefono} usando WhatsApp Desktop.")
    except Exception as e:
        logging.error(f"Error al enviar mensaje por WhatsApp a {telefono}: {e}")
        print(f"‚ö†Ô∏è Error al enviar mensaje por WhatsApp: {e}")

# --- PROCESAMIENTO DE USUARIOS Y NOTIFICACIONES ---
def procesar_usuarios():
    """
    Procesa el archivo Excel de usuarios, env√≠a notificaciones y genera el dashboard.
    """
    archivo = "usuario.xlsx"
    try:
        df = pd.read_excel(archivo)
        logging.info(f"Archivo {archivo} le√≠do correctamente.")
    except Exception as e:
        logging.error(f"Error al leer archivo {archivo}: {e}")
        raise
    df.columns = df.columns.str.strip().str.lower()
    hoy = datetime.now().date()
    hora_actual = datetime.now().hour
    usuarios_vencidos, usuarios_7_dias, usuarios_1_dia, usuarios_0_dias = [], [], [], []
    usuarios_nuevos, usuarios_notificados = [], []
    for index, row in df.iterrows():
        try:
            nombre = row["apellidos y nombres"].strip()
            telefono = str(row["n¬∫ celular"]).strip().replace("-", "").replace(" ", "")
            fecha_fin = pd.to_datetime(row["fch. vto."], errors="coerce").date()
            if pd.isna(fecha_fin):
                continue
            dias_restantes = (fecha_fin - hoy).days
            mensaje = None
            if dias_restantes < 0:
                usuarios_vencidos.append((nombre, telefono, fecha_fin))
            elif dias_restantes == 7:
                usuarios_7_dias.append((nombre, telefono, fecha_fin))
                mensaje = f"Hola {nombre}, soy el asistente virtual de Unidad Tecnologia de la Informacion(UTI) tu contrato vence en 7 d√≠as. ¬°No olvides renovarlo para evitar el corte del sistema SIAM SOFT!"
            elif dias_restantes == 1:
                usuarios_1_dia.append((nombre, telefono, fecha_fin))
                mensaje = f"Hola {nombre}, soy el asistente virtual de Unidad Tecnologia de la Informacion(UTI) te recordamos que tu contrato vence ma√±ana. ¬°Evita inconvenientes y renueva tu acceso al sistema SIAM SOFT lo antes posible!"
            elif dias_restantes == 0 and hora_actual < 17:
                usuarios_0_dias.append((nombre, telefono, fecha_fin))
                mensaje = f"‚ö†Ô∏è Hola {nombre}, soy el asistente virtual de Unidad Tecnologia de la Informacion(UTI) tu acceso al sistema SIAM SOFT ser√° suspendido hoy a las 5:00 PM. Si a√∫n no has renovado tu vinculo laboral, Comunicate con soporte para mas informacion N¬∞ 989544883"
            if mensaje:
                correo_raw = row.get("email")
                if not isinstance(correo_raw, str) or pd.isna(correo_raw) or "@" not in correo_raw:
                    logging.warning(f"Email inv√°lido para {nombre}: {correo_raw}")
                    print(f"‚ùå Email inv√°lido: {correo_raw}")
                    continue
                correo = correo_raw.strip()
                asunto = "Aviso de vencimiento de contrato"
                enviar_correo(correo, asunto, mensaje)
                print(f"üìß Correo enviado a {nombre} ({correo}).")
                usuarios_notificados.append((nombre, correo, mensaje))
                if telefono:
                    enviar_whatsapp(telefono, mensaje)
        except Exception as e:
            logging.error(f"Error con usuario {row.get('apellidos y nombres', 'Desconocido')}: {e}")
            print(f"‚ùå Error con {row.get('apellidos y nombres', 'Desconocido')}: {e}")
    return usuarios_vencidos, usuarios_7_dias, usuarios_1_dia, usuarios_0_dias, usuarios_nuevos, usuarios_notificados

def filas_tabla(lista, columnas):
    """
    Genera filas HTML para la tabla del dashboard.
    """
    import html
    logging.info(f"Generando filas de tabla para {len(lista)} elementos y {columnas} columnas.")
    return "\n".join(
        "<tr>{}</tr>".format("".join(f"<td>{html.escape(str(item[i]))}</td>" for i in range(columnas)))
        for item in lista
    )

def generar_dashboard(usuarios_vencidos, usuarios_7_dias, usuarios_1_dia, usuarios_0_dias, usuarios_nuevos, usuarios_notificados):
    """
    Genera el dashboard HTML con los datos procesados.
    """
    try:
        with open("dashboard_template.html", "r", encoding="utf-8") as f:
            html_template = f.read()
        logging.info("Plantilla dashboard le√≠da correctamente.")
    except Exception as e:
        logging.error(f"Error al leer plantilla dashboard: {e}")
        raise
    html_final = (
        html_template
        .replace("{{VENCIDOS}}", str(len(usuarios_vencidos)))
        .replace("{{FALTAN_7}}", str(len(usuarios_7_dias)))
        .replace("{{FALTA_1}}", str(len(usuarios_1_dia)))
        .replace("{{SUSPENDIDOS}}", str(len(usuarios_0_dias)))
        .replace("{{NUEVOS}}", str(len(usuarios_nuevos)))
        .replace("{{NOTIFICADOS}}", str(len(usuarios_notificados)))
        .replace("{{TABLA_VENCIDOS}}", filas_tabla(usuarios_vencidos, 3))
        .replace("{{TABLA_7DIAS}}", filas_tabla(usuarios_7_dias, 3))
        .replace("{{TABLA_1DIA}}", filas_tabla(usuarios_1_dia, 3))
        .replace("{{TABLA_SUSPENDIDOS}}", filas_tabla(usuarios_0_dias, 3))
        .replace("{{TABLA_NUEVOS}}", filas_tabla(usuarios_nuevos, 4))
        .replace("{{TABLA_NOTIFICADOS}}", filas_tabla(usuarios_notificados, 3))
    )
    dashboard_path = "dashboard.html"
    try:
        with open(dashboard_path, "w", encoding="utf-8") as file:
            file.write(html_final)
        logging.info("Dashboard generado correctamente.")
        webbrowser.open("file://" + os.path.abspath(dashboard_path))
        print("‚úÖ Dashboard generado y abierto exitosamente. Correos electr√≥nicos enviados.")
    except Exception as e:
        logging.error(f"Error al generar o abrir dashboard: {e}")
        raise

def cargar_credenciales():
    """
    Carga credenciales desde un archivo JSON.
    """
    try:
        with open("credenciales.json", "r") as f:
            logging.info("Credenciales cargadas correctamente.")
            return json.load(f)
    except Exception as e:
        logging.error(f"No se pudo cargar credenciales: {e}")
        messagebox.showerror("Error", f"No se pudo cargar credenciales: {e}")
        return {}

# --- INTERFAZ DE USUARIO Y LOGIN ---
def buscar_usuario_por_dni():
    """
    Interfaz para buscar usuarios por DNI y enviar credenciales por correo y WhatsApp.
    """
    import logging
    logging.basicConfig(filename='log_busqueda_dni.txt', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')
    def buscar():
        global usuarios_nuevos
        dni_input = entrada_dni.get().strip()
        logging.info(f"DNI(s) ingresados: {dni_input}")
        if not dni_input:
            messagebox.showinfo("Bienvenida", "¬°Bienvenido/a al sistema!")
            logging.info("No se ingres√≥ ning√∫n DNI. Se ejecuta procesar_usuarios().")
            procesar_usuarios()
            ventana_dni.destroy()
            return
        dni_lista = [dni.strip() for dni in dni_input.split(",") if dni.strip()]
        logging.info(f"DNI(s) procesados: {dni_lista}")
        if not dni_lista:
            messagebox.showerror("Error", "No ingresaste ning√∫n DNI v√°lido.")
            logging.warning("No se ingres√≥ ning√∫n DNI v√°lido.")
            return
        try:
            archivo = "usuario.xlsx"
            df = pd.read_excel(archivo)
            df.columns = df.columns.str.strip().str.lower()
            columna_dni = next((col for col in df.columns if "dni" in col), None)
            if not columna_dni:
                messagebox.showerror("Error", "No se encontr√≥ la columna del DNI en el Excel.")
                logging.error("No se encontr√≥ la columna del DNI en el Excel.")
                return
            df[columna_dni] = df[columna_dni].apply(lambda x: str(int(x)).zfill(8) if pd.notna(x) else "")
            encontrados = 0
            for dni in dni_lista:
                resultado = df[df[columna_dni] == dni]
                if not resultado.empty:
                    fila = resultado.iloc[0]
                    nombre = fila.get("apellidos y nombres", "Usuario")
                    email = fila.get("email", "")
                    telefono = str(fila.get("n¬∫ celular", "")).strip().replace("-", "").replace(" ", "")
                    fecha_fin = pd.to_datetime(fila.get("fch. vto."), errors="coerce")
                    primer_apellido = nombre.split()[0].upper() if nombre else "USUARIO"
                    ultimos_4_dni = dni[-4:] if dni and len(dni) >= 4 else "XXXX"
                    codigo_personalizado = f"{primer_apellido}{ultimos_4_dni}"
                    logging.info(f"DNI encontrado: {dni} - Nombre: {nombre} - Email: {email} - Tel√©fono: {telefono}")
                    if pd.isna(email) or not isinstance(email, str) or "@" not in email:
                        messagebox.showinfo("Bienvenida", f"{nombre} encontrado, pero sin correo v√°lido.")
                        logging.warning(f"{nombre} encontrado, pero sin correo v√°lido.")
                        continue
                    asunto = "Bienvenida"
                    cuerpo = (
                        f"Hola somos de la Unidad Tecnologia de la Informacion UTI \n Sr.{nombre}, ¬°bienvenido/a al sistema de SIAM SOFT!\n\n"
                        f"Tu usuario es: {codigo_personalizado}\n"
                        f"Tu contrase√±a por defecto es 123456, por su seguridad le sugerimos cambiarla a la brevedad!!\n"
                        f"El uso de la cuenta es PERSONAL\n"
                        f"Puedes visitar nuestra pagina, https://www.muniyarabamba.gob.pe/"
                    )
                    try:
                        enviar_correo(email, asunto, cuerpo)
                        logging.info(f"Correo de bienvenida enviado a {email}")
                        print(f"‚úÖ Correo de bienvenida enviado a {email}")
                        usuarios_nuevos.append((nombre, telefono, fecha_fin.strftime("%d/%m/%Y"), cuerpo))
                        encontrados += 1
                    except Exception as e:
                        logging.error(f"Error al enviar correo a {email}: {e}")
                        print(f"‚ùå Error al enviar correo a {email}: {e}")
                        messagebox.showerror("Error", f"No se pudo enviar correo a {email}")
                        if telefono:
                            enviar_whatsapp(telefono, cuerpo)
                            logging.info(f"WhatsApp de bienvenida enviado a {telefono}")
                        usuarios_nuevos.append((nombre, telefono, fecha_fin.strftime("%d/%m/%Y"), cuerpo))
                        encontrados += 1
                else:
                    print(f"‚ö†Ô∏è DNI no encontrado: {dni}")
                    logging.warning(f"DNI no encontrado: {dni}")
                    messagebox.showinfo("No encontrado", f"No se encontr√≥ el DNI {dni} en el archivo.")
            if encontrados > 0:
                messagebox.showinfo("√âxito", f"Se procesaron {encontrados} usuario(s) correctamente.")
                logging.info(f"Se procesaron {encontrados} usuario(s) correctamente.")
        except Exception as e:
            messagebox.showerror("Error", f"Ocurri√≥ un error: {e}")
            logging.error(f"Ocurri√≥ un error: {e}")
        procesar_usuarios()
        ventana_dni.destroy()
    ventana_dni = tk.Toplevel()
    ventana_dni.title("Buscar usuarios por DNI")
    ventana_dni.geometry("500x220")
    ventana_dni.resizable(False, False)
    ventana_dni.transient()
    ventana_dni.grab_set()
    ventana_dni.focus()
    tk.Label(ventana_dni, text="Ingrese uno o varios DNI separados por coma:").pack(pady=5)
    entrada_dni = tk.Entry(ventana_dni, width=40)
    entrada_dni.pack(pady=5)
    tk.Button(ventana_dni, text="Buscar", command=buscar).pack(pady=10)

def login_ui():
    """
    Interfaz de login para acceder al sistema.
    """
    def verificar_credenciales():
        usuario = entrada_usuario.get().strip()
        contrasena = entrada_contrasena.get().strip()
        credenciales = cargar_credenciales()
        if usuario == credenciales.get("usuario") and contrasena == credenciales.get("contrasena"):
            messagebox.showinfo("Login", "Ingreso exitoso")
            buscar_usuario_por_dni()
        else:
            messagebox.showerror("Error", "Usuario o contrase√±a incorrectos")
    global ventana 
    ventana = tk.Tk()
    ventana.title("Login - UTI")
    ventana.geometry("300x200")
    ventana.resizable(False, False)
    tk.Label(ventana, text="Usuario").pack(pady=5)
    entrada_usuario = tk.Entry(ventana)
    entrada_usuario.pack()
    tk.Label(ventana, text="Contrase√±a").pack(pady=5)
    entrada_contrasena = tk.Entry(ventana, show="*")
    entrada_contrasena.pack()
    tk.Button(ventana, text="Iniciar sesi√≥n", command=verificar_credenciales).pack(pady=10)
    ventana.mainloop()

# --- EJECUCI√ìN PRINCIPAL ---
if __name__ == "__main__":
    login_ui()